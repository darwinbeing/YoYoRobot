# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from face_detect/faces.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import face_detect.msg

class faces(genpy.Message):
  _md5sum = "0a7567e15b2cf367464a82218fea65a8"
  _type = "face_detect/faces"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """facebox[] face_boxes
uint16 image_width
uint16 image_height

================================================================================
MSG: face_detect/facebox
uint16 top
uint16 left
uint16 width
uint16 height
"""
  __slots__ = ['face_boxes','image_width','image_height']
  _slot_types = ['face_detect/facebox[]','uint16','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       face_boxes,image_width,image_height

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(faces, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.face_boxes is None:
        self.face_boxes = []
      if self.image_width is None:
        self.image_width = 0
      if self.image_height is None:
        self.image_height = 0
    else:
      self.face_boxes = []
      self.image_width = 0
      self.image_height = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.face_boxes)
      buff.write(_struct_I.pack(length))
      for val1 in self.face_boxes:
        _x = val1
        buff.write(_struct_4H.pack(_x.top, _x.left, _x.width, _x.height))
      _x = self
      buff.write(_struct_2H.pack(_x.image_width, _x.image_height))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.face_boxes is None:
        self.face_boxes = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.face_boxes = []
      for i in range(0, length):
        val1 = face_detect.msg.facebox()
        _x = val1
        start = end
        end += 8
        (_x.top, _x.left, _x.width, _x.height,) = _struct_4H.unpack(str[start:end])
        self.face_boxes.append(val1)
      _x = self
      start = end
      end += 4
      (_x.image_width, _x.image_height,) = _struct_2H.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.face_boxes)
      buff.write(_struct_I.pack(length))
      for val1 in self.face_boxes:
        _x = val1
        buff.write(_struct_4H.pack(_x.top, _x.left, _x.width, _x.height))
      _x = self
      buff.write(_struct_2H.pack(_x.image_width, _x.image_height))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.face_boxes is None:
        self.face_boxes = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.face_boxes = []
      for i in range(0, length):
        val1 = face_detect.msg.facebox()
        _x = val1
        start = end
        end += 8
        (_x.top, _x.left, _x.width, _x.height,) = _struct_4H.unpack(str[start:end])
        self.face_boxes.append(val1)
      _x = self
      start = end
      end += 4
      (_x.image_width, _x.image_height,) = _struct_2H.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2H = struct.Struct("<2H")
_struct_4H = struct.Struct("<4H")
