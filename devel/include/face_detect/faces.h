// Generated by gencpp from file face_detect/faces.msg
// DO NOT EDIT!


#ifndef FACE_DETECT_MESSAGE_FACES_H
#define FACE_DETECT_MESSAGE_FACES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <face_detect/facebox.h>

namespace face_detect
{
template <class ContainerAllocator>
struct faces_
{
  typedef faces_<ContainerAllocator> Type;

  faces_()
    : face_boxes()
    , image_width(0)
    , image_height(0)  {
    }
  faces_(const ContainerAllocator& _alloc)
    : face_boxes(_alloc)
    , image_width(0)
    , image_height(0)  {
  (void)_alloc;
    }



   typedef std::vector< ::face_detect::facebox_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::face_detect::facebox_<ContainerAllocator> >::other >  _face_boxes_type;
  _face_boxes_type face_boxes;

   typedef uint16_t _image_width_type;
  _image_width_type image_width;

   typedef uint16_t _image_height_type;
  _image_height_type image_height;




  typedef boost::shared_ptr< ::face_detect::faces_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::face_detect::faces_<ContainerAllocator> const> ConstPtr;

}; // struct faces_

typedef ::face_detect::faces_<std::allocator<void> > faces;

typedef boost::shared_ptr< ::face_detect::faces > facesPtr;
typedef boost::shared_ptr< ::face_detect::faces const> facesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::face_detect::faces_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::face_detect::faces_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace face_detect

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'face_detect': ['/home/corvin/YoYoRobot/YoYoRobot/src/face_detect/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::face_detect::faces_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::face_detect::faces_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::face_detect::faces_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::face_detect::faces_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::face_detect::faces_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::face_detect::faces_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::face_detect::faces_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0a7567e15b2cf367464a82218fea65a8";
  }

  static const char* value(const ::face_detect::faces_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0a7567e15b2cf367ULL;
  static const uint64_t static_value2 = 0x464a82218fea65a8ULL;
};

template<class ContainerAllocator>
struct DataType< ::face_detect::faces_<ContainerAllocator> >
{
  static const char* value()
  {
    return "face_detect/faces";
  }

  static const char* value(const ::face_detect::faces_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::face_detect::faces_<ContainerAllocator> >
{
  static const char* value()
  {
    return "facebox[] face_boxes\n\
uint16 image_width\n\
uint16 image_height\n\
\n\
================================================================================\n\
MSG: face_detect/facebox\n\
uint16 top\n\
uint16 left\n\
uint16 width\n\
uint16 height\n\
";
  }

  static const char* value(const ::face_detect::faces_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::face_detect::faces_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.face_boxes);
      stream.next(m.image_width);
      stream.next(m.image_height);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct faces_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::face_detect::faces_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::face_detect::faces_<ContainerAllocator>& v)
  {
    s << indent << "face_boxes[]" << std::endl;
    for (size_t i = 0; i < v.face_boxes.size(); ++i)
    {
      s << indent << "  face_boxes[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::face_detect::facebox_<ContainerAllocator> >::stream(s, indent + "    ", v.face_boxes[i]);
    }
    s << indent << "image_width: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.image_width);
    s << indent << "image_height: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.image_height);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FACE_DETECT_MESSAGE_FACES_H
